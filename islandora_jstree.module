<?php

/**
 * @file
 * An Islandora viewer module using jsTree
 */
 
/**
 * Implements hook_islandora_viewer_info().
 */
function islandora_jstree_islandora_viewer_info() {
  return array(
    'islandora_jstree' => array(
      'label' => t('jsTree player'),
      'description' => t('jsTree for zip files.'),
      'callback' => 'islandora_jstree_callback',
      'mimetype' => array('application/zip'),
      'configuration' => 'admin/islandora/islandora_viewers/jstree',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function islandora_jstree_menu() {
  return array(
    'admin/islandora/islandora_viewers/jstree' => array(
      'title' => 'jsTree',
      'description' => 'Configure the jsTree viewer.',
      'page callback' => 'drupal_get_form',
      'access arguments' => array('administer site configuration'),
      'page arguments' => array('islandora_jsTree_admin'),
      'file' => 'includes/admin.form.inc',
      'type' => MENU_NORMAL_ITEM,
    ),
  );
}

/**
 * Implements hook_theme().
 */
function islandora_jstree_theme($existing, $type, $theme, $path) {
  return array(
    'islandora_jstree' => array(
      'template' => 'theme/islandora-jstree',
      'variables' => array('object' => NULL, 'params' => NULL),
    ),
  );
}

/**
 * Callback function to the viewer
 *
 * @param array $params
 *   Array with configuration info for the tabular.
 */
function islandora_jstree_callback($params = array(), $object = null) {
  return theme('islandora_jstree', array('object' => $object, 'params' => $params));
}

/**
 * Implements hook_preprocess().
 */
function islandora_jstree_preprocess_islandora_jstree(&$variables) {
  $library_path = libraries_get_path('jstree');
  $module_path = drupal_get_path('module', 'islandora_jstree');
  
  $params = $variables['params'];
  $dsid = $params['dsid'];
  
  $ds = $variables['object'][$dsid];
  
  //create a copy because we can not directly open a datastream
  $file = tempnam('/tmp', 'zip_file.zip');
  $ds->getContent($file);
  
  $za = new ZipArchive();
  $res = $za->open($file);
  
  if($res == false || $za->numFiles < 1) {
    $variables['errorMessage'] = 'jstree is unable to read the zip file.';

  }
  
  if(isset($variables['errorMessage'])) {
    drupal_add_css($module_path . "/css/jstree.css");
    return;
  }
  
  $json = "[";

  //Prevent freezing by limiting number of files loaded
  $MAX_FILES = (int)variable_get('islandora_jstree_max_element', 1000);
  
  for ($i=0; $i<$za->numFiles && ($i<$MAX_FILES || $MAX_FILES < 0); $i++) {
    $zipDtls = $za->statIndex($i);
    $id = $zipDtls['name'];
      
    //if the id ends with '/'
    if (substr($id, -1) == '/') {
      $type = 'directory';
      $id = rtrim($id, '/');
    }
    else {
      $type = 'file';
    }
    
    $parent = '#';
    $name = $id;
    $lastSlash = strrpos($id, '/');
    if($lastSlash != 0){ 
      $parent = substr($id, 0, $lastSlash);
      $name = substr($id, $lastSlash+1);
    }
    
    if($i != 0)
      $json .= ",\n";
    $json .= "{ \"id\" : \"$id\", \"parent\" : \"$parent\", \"text\" : \"$name\", \"type\" : \"$type\" }";
  }

  $json .= "]";
  
  $truncated = $za->numFiles - $MAX_FILES;
  if($MAX_FILES >= 0 && $truncated > 0)
    $variables['truncated'] = $truncated;
  
  drupal_add_js(array(
    'islandoraJSTree' => array(
      'resourceUri' => $json,
    ),
  ),'setting');
  
  drupal_add_js($library_path . "/dist/jstree.min.js", array('weight' => -3));
  drupal_add_js($module_path . "/js/main.js", array('weight' => -2));
  
  drupal_add_css($library_path . "/dist/themes/default/style.min.css");
  drupal_add_css($module_path . "/css/jstree.css");
}
